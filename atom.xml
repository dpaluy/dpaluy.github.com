<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Paluy on Miscellaneous]]></title>
  <link href="http://dpaluy.github.io/atom.xml" rel="self"/>
  <link href="http://dpaluy.github.io/"/>
  <updated>2013-06-20T20:27:40+03:00</updated>
  <id>http://dpaluy.github.io/</id>
  <author>
    <name><![CDATA[David Paluy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Process Information]]></title>
    <link href="http://dpaluy.github.io/blog/2013/04/29/process-information/"/>
    <updated>2013-04-29T23:09:00+03:00</updated>
    <id>http://dpaluy.github.io/blog/2013/04/29/process-information</id>
    <content type="html"><![CDATA[<p>I found it very useful to see my application process info on an admin page, as following:</p>

<p><img src="http://dpaluy.github.io/images/process_info.png" title="Process Info" ></p>

<p>You can do it inside your Rails app.</p>

<p>Inside your <em>controller/admin_controller.rb</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@processes</span> <span class="o">=</span> <span class="sb">`ps -g </span><span class="si">#{</span><span class="no">Process</span><span class="o">.</span><span class="n">getsid</span><span class="p">(</span><span class="vg">$$</span><span class="p">)</span><span class="si">}</span><span class="sb"> -o pid,wchan,%cpu,%mem,rss,vsz,command`</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@proc_headers</span> <span class="o">=</span> <span class="vi">@processes</span><span class="o">.</span><span class="n">shift</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@processes</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">,</span> <span class="vi">@proc_headers</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span>
</span><span class='line'>      <span class="n">reject!</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">line</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;ps -g&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and add the following to your <em>view/admin/index.html.erb</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;table&gt;</span>
</span><span class='line'><span class="x">  &lt;thead&gt;</span>
</span><span class='line'><span class="x">    &lt;tr&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="vi">@proc_headers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">th</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;th&gt;</span><span class="cp">&lt;%=</span> <span class="n">th</span> <span class="cp">%&gt;</span><span class="x">&lt;/th&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;/tr&gt;</span>
</span><span class='line'><span class="x">  &lt;/thead&gt;</span>
</span><span class='line'><span class="x">  &lt;tbody&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="vi">@processes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;tr&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="n">line</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">td</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">        &lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">td</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;/tr&gt;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/tbody&gt;</span>
</span><span class='line'><span class="x">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I would like to thank <a href="https://twitter.com/romanbsd">@romanbsd</a> for this source.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[protect email from spam bots]]></title>
    <link href="http://dpaluy.github.io/blog/2013/04/16/protect-email-from-spam-bots/"/>
    <updated>2013-04-16T23:54:00+03:00</updated>
    <id>http://dpaluy.github.io/blog/2013/04/16/protect-email-from-spam-bots</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>Spam bots are getting a lot smarter at harvesting email addresses from web pages. Use <em>encode</em> option while using <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-mail_to" target="_blank">mail_to</a></p>

<h2>Ways to protect your email: me@domain.com</h2>

<ul>
<li>Weak solution - substitute characters: <strong>me_at_domain_dot_com</strong></li>
<li>Weak solution - HEX encoding: <strong>%6d%65@%64%6f%6d%61%69%6e.%63%6f%6d</strong></li>
<li>Better solution - Javascript encoding:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mail_to</span> <span class="s2">&quot;me@domain.com&quot;</span><span class="p">,</span> <span class="s2">&quot;Contact us&quot;</span><span class="p">,</span> <span class="ss">:encode</span> <span class="o">=&gt;</span> <span class="s2">&quot;javascript&quot;</span>
</span><span class='line'><span class="c1"># =&gt; &lt;script type=&quot;text/javascript&quot;&gt;eval(decodeURIComponent(&#39;%64%6f%63...%27%29%3b&#39;))&lt;/script&gt;</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># The JavaScript evaluates the following:</span>
</span><span class='line'><span class="c1"># document.write(&#39;&lt;a href=\&quot;mailto:me@domain.com\&quot;&gt;Contact us&lt;\/a&gt;&#39;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check more details <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-mail_to" target="_blank">here</a>.</p>

<h3>Another way to encode your mail_to with JavaScript</h3>

<p><a href="http://www.jottings.com/obfuscator.htm" target="_blank">Email obfuscator script 2.1 by Tim Williams</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">script</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="n">language</span><span class="o">=</span><span class="s2">&quot;javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;!--</span>
</span><span class='line'><span class="sr">//</span> <span class="no">Email</span> <span class="n">obfuscator</span> <span class="n">script</span> <span class="mi">2</span><span class="o">.</span><span class="mi">1</span> <span class="n">by</span> <span class="no">Tim</span> <span class="no">Williams</span><span class="p">,</span> <span class="no">University</span> <span class="n">of</span> <span class="no">Arizona</span>
</span><span class='line'><span class="sr">//</span> <span class="no">Random</span> <span class="n">encryption</span> <span class="n">key</span> <span class="n">feature</span> <span class="n">by</span> <span class="no">Andrew</span> <span class="no">Moulden</span><span class="p">,</span> <span class="no">Site</span> <span class="no">Engineering</span> <span class="no">Ltd</span>
</span><span class='line'><span class="sr">//</span> <span class="no">This</span> <span class="n">code</span> <span class="n">is</span> <span class="n">freeware</span> <span class="n">provided</span> <span class="n">these</span> <span class="n">four</span> <span class="n">comment</span> <span class="n">lines</span> <span class="n">remain</span> <span class="n">intact</span>
</span><span class='line'><span class="sr">//</span> <span class="n">A</span> <span class="n">wizard</span> <span class="n">to</span> <span class="n">generate</span> <span class="n">this</span> <span class="n">code</span> <span class="n">is</span> <span class="n">at</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">www</span><span class="o">.</span><span class="n">jottings</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">obfuscator</span><span class="o">/</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">coded</span> <span class="o">=</span> <span class="s2">&quot;B6@LSBeJv.ASB&quot;</span>
</span><span class='line'>  <span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;78ncPmS9z0hseXrvAKBlgi1OC6tjYU2qdIJw5MVfQyb3ZLH4ExRWNTpoFkuGDa&quot;</span>
</span><span class='line'>  <span class="n">shift</span><span class="o">=</span><span class="n">coded</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>  <span class="n">link</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">coded</span><span class="o">.</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">key</span><span class="o">.</span><span class="n">indexOf</span><span class="p">(</span><span class="n">coded</span><span class="o">.</span><span class="n">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">))</span><span class="o">==-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">ltr</span> <span class="o">=</span> <span class="n">coded</span><span class="o">.</span><span class="n">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">link</span> <span class="o">+=</span> <span class="p">(</span><span class="n">ltr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">ltr</span> <span class="o">=</span> <span class="p">(</span><span class="n">key</span><span class="o">.</span><span class="n">indexOf</span><span class="p">(</span><span class="n">coded</span><span class="o">.</span><span class="n">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">))</span><span class="o">-</span><span class="n">shift</span><span class="o">+</span><span class="n">key</span><span class="o">.</span><span class="n">length</span><span class="p">)</span> <span class="o">%</span> <span class="n">key</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>      <span class="n">link</span> <span class="o">+=</span> <span class="p">(</span><span class="n">key</span><span class="o">.</span><span class="n">charAt</span><span class="p">(</span><span class="n">ltr</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">document</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;&lt;a href=&#39;mailto:&quot;</span><span class="o">+</span><span class="n">link</span><span class="o">+</span><span class="s2">&quot;&#39;&gt;Contact us&lt;/a&gt;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">//</span><span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/script&gt;&lt;noscript&gt;Sorry, you need Javascript on to email me.&lt;/nos</span><span class="n">cript</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Important! You can&#8217;t protect your email 100%</h3>

<p>If the bot evaluates JavaScript before harvesting email addresses, you can&#8217;t resist it.</p>

<p>For example, it can be done using <a href="http://phantomjs.org/" target='_blank'>PhantomJS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caution - to_time in Rails]]></title>
    <link href="http://dpaluy.github.io/blog/2013/04/15/caution-to-time-in-rails/"/>
    <updated>2013-04-15T13:14:00+03:00</updated>
    <id>http://dpaluy.github.io/blog/2013/04/15/caution-to-time-in-rails</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>Attention on time zone while using <em>today.to_time</em> in your Rails application!</p>

<h2>Ruby <em>to_time</em> in your Rails application</h2>

<p>Suppose, you need to convert some date to datetime. You can use the Ruby <a href="http://api.rubyonrails.org/classes/Date.html#method-i-to_time" target="_blank">to_time</a> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">date</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mo">04</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">date</span><span class="o">.</span><span class="n">to_time</span>            <span class="c1"># 2013-04-15 00:00:00 +0300</span>
</span><span class='line'><span class="n">date</span><span class="o">.</span><span class="n">to_time</span><span class="p">(</span><span class="ss">:local</span><span class="p">)</span>    <span class="c1"># 2013-04-15 00:00:00 +0300</span>
</span><span class='line'><span class="c1"># The Time Zone depends on your local machine</span>
</span><span class='line'>
</span><span class='line'><span class="n">date</span><span class="o">.</span><span class="n">to_time</span><span class="p">(</span><span class="ss">:utc</span><span class="p">)</span>      <span class="c1"># 2013-04-15 00:00:00 +0000</span>
</span></code></pre></td></tr></table></div></figure>


<p>If your server time zone is UTC, but Rails application has different time zone, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">time_zone</span> <span class="o">=</span> <span class="s1">&#39;Central Time (US &amp; Canada)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>converting from date to time will ignore Rails settings!</p>

<p>It happens, when you need to output your date in epoch format (for example: in json).</p>

<p>I suggest to convert your date to utc and than to epoch.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">epoch</span> <span class="o">=</span> <span class="n">date</span><span class="o">.</span><span class="n">to_time</span><span class="p">(</span><span class="ss">:utc</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, apply local time zone using JavaScript::</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">date</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">Date</span><span class="p">(</span><span class="n">epoch</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Profiling Rails Applications]]></title>
    <link href="http://dpaluy.github.io/blog/2013/04/09/profiling-rails-applications/"/>
    <updated>2013-04-09T01:49:00+03:00</updated>
    <id>http://dpaluy.github.io/blog/2013/04/09/profiling-rails-applications</id>
    <content type="html"><![CDATA[<p>Your finaly got clients and everything works fine.</p>

<p><img src="http://dpaluy.github.io/images/mass_attack.gif" title="Users Attack" ></p>

<p>But users expect several performance issues.</p>

<h2>How can I profile my Ruby on Rails application?</h2>

<h3>Available Tools</h3>

<ul>
<li><a href="#gc-profiler">GC::Profiler</a></li>
<li><a href="#ruby-benchmark">Ruby Benchmark</a></li>
<li><a href="#object-space">ObjectSpace</a></li>
<li><a href="#ruby-prof">gem ruby-prof</a></li>
<li><a href="#perftools">gem perftools.rb</a></li>
</ul>


<h4 id='gc-profiler'><a href="http://ruby-doc.org/core-1.9.3/GC/Profiler.html" target="_blank">GC::Profiler</a></h4>


<p>The GC profiler provides access to information on GC runs including time, length and object space size.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GC</span><span class="o">.</span><span class="n">start</span> <span class="c1"># clear GC before profiling</span>
</span><span class='line'><span class="no">GC</span><span class="o">::</span><span class="no">Profiler</span><span class="o">.</span><span class="n">enable</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># your code</span>
</span><span class='line'>
</span><span class='line'><span class="no">GC</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">GC</span><span class="o">::</span><span class="no">Profiler</span><span class="o">.</span><span class="n">report</span>
</span><span class='line'><span class="no">GC</span><span class="o">::</span><span class="no">Profiler</span><span class="o">.</span><span class="n">disable</span>
</span></code></pre></td></tr></table></div></figure>




<h4 id='ruby-benchmark'><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html" target="_blank">Ruby Benchmark</a></h4>


<p>Ruby has core module to Benchmark your code. It helps you to mesure running time of your code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span> <span class="k">do</span><span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>  <span class="n">b</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;+= &quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="mi">500_000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">a</span> <span class="o">+=</span> <span class="s2">&quot;.&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">b</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;&lt;&lt; &quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="mi">500_000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;.&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I suggest you to add <a href="https://github.com/evanphx/benchmark_suite" target="_blank">benchmark_suite gem</a>. There is a set of enhancements to the standard library benchmark.rb</p>

<h4 id='object-space'>ObjectSpace</h4>


<p>ObjectSpace class already described in previous <a href="http://dpaluy.github.io/blog/2013/02/06/debugging-rails-application-part-2/#object-space">post</a>.
You should also check <a href="http://cirw.in/blog/find-references" target="_blank">Visualizing memory leaks in Ruby</a> using ObjectSpace methods.</p>

<h4 id='ruby-prof'><a href="https://github.com/ruby-prof/ruby-prof" target="_blank">RUBY-PROF</a></h4>


<p><strong>How to use in Rails:</strong></p>

<ul>
<li>Add the ruby-prof to your gemfile</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:profile</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;ruby-prof&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> verify your <em>/config/environments/profile.rb</em> has the following settings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_classes</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">cache_template_loading</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Add rack adapter to <strong>config.ru</strong>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">profile?</span>
</span><span class='line'>  <span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">RubyProf</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;/temp/profile&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> By default the rack adapter will generate a html call graph report and flat text report. You can add printer option as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">RubyProf</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;/temp/profile&#39;</span><span class="p">,</span> <span class="ss">:printers</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="no">RubyProf</span><span class="o">::</span><span class="no">GraphHtmlPrinter</span> <span class="o">=&gt;</span> <span class="s1">&#39;graph.html&#39;</span><span class="p">}</span> <span class="c1"># or any other printer as described</span>
</span></code></pre></td></tr></table></div></figure>


<p>More printers options can be found <a href="https://github.com/ruby-prof/ruby-prof#printers" target="_blank">here</a></p>

<ul>
<li>Add Profile to your code:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># define mesurment type</span>
</span><span class='line'><span class="c1"># as described: https://github.com/ruby-prof/ruby-prof#measurements</span>
</span><span class='line'><span class="no">RubyProf</span><span class="o">.</span><span class="n">measure_mode</span> <span class="o">=</span> <span class="no">RubyProf</span><span class="o">::</span><span class="no">PROCESS_TIME</span>
</span><span class='line'>
</span><span class='line'><span class="no">RubyProf</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># code to profile</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="no">RubyProf</span><span class="o">.</span><span class="n">stop</span>
</span></code></pre></td></tr></table></div></figure>




<h4 id='perftools'><a href="https://github.com/tmm1/perftools.rb" target="_blank">Perftools.rb</a></h4>


<p>While ruby-prof is a good tool, I, personally, prefere to use <strong>perftools.rb</strong>.
It also has a <a href="https://github.com/bhb/rack-perftools_profiler" target="_blank">rack gem</a>.</p>

<p>The <strong>main advantage</strong> of perftools: it samples your process using setitimer() so it can be used in production with minimal overhead.</p>

<p><strong>How to use in Rails:</strong></p>

<ul>
<li>Add the rack-perftools_profiler to your gemfile</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rack-perftools_profiler&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s1">&#39;rack/perftools_profiler&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Add middleware to <strong>config/environment.rb</strong>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="o">::</span><span class="no">Rack</span><span class="o">::</span><span class="no">PerftoolsProfiler</span><span class="p">,</span> <span class="ss">:default_printer</span> <span class="o">=&gt;</span> <span class="s1">&#39;pdf&#39;</span><span class="p">,</span> <span class="ss">:bundler</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>See more options <a href="https://github.com/bhb/rack-perftools_profiler#options" target="_blank">here</a>.</p>

<ul>
<li>Profile your application</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">curl</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">__start__</span>
</span><span class='line'><span class="n">curl</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">__stop__</span>
</span><span class='line'><span class="n">curl</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">__data__</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Visualization of your report</h3>

<ul>
<li>ruby-prof and perftools.rb has support for different output formats. One of them is <a href="http://kcachegrind.sourceforge.net/html/Home.html" target="_blank">KCacheGrind</a></li>
<li>In Ruby 2 you can gather your stack traces. Read more <a href="Flame graphs in Ruby MiniProfiler" target="_blank">here</a></li>
</ul>


<h2>Summary</h2>

<ul>
<li>Remember: More Objects => Longer GC => Slow application</li>
<li>Always examine your HEAP</li>
<li>Use Tools!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Rails Application - Part 2]]></title>
    <link href="http://dpaluy.github.io/blog/2013/02/06/debugging-rails-application-part-2/"/>
    <updated>2013-02-06T11:32:00+02:00</updated>
    <id>http://dpaluy.github.io/blog/2013/02/06/debugging-rails-application-part-2</id>
    <content type="html"><![CDATA[<p>In previous <a href="http://dpaluy.github.io/blog/2013/01/30/debugging-rails-application-part1/">post</a>, I described which tools I use for debugging Rails (Ruby) applications.</p>

<p>In this post I will show you how to debug your Garbage Collector.</p>

<h3>Why should I debug my GC?</h3>

<p>First, you should understand how ruby allocates memory for new objects.
What happened inside your OS, each time you write <code>book = Book.new</code>?</p>

<p><img src="http://dpaluy.github.io/images/how_ruby_works.png" alt="How Ruby Memory Works" /></p>

<p>RVM defines Process Heap for each Ruby process. Than, it creates first Ruby Heap.
Each Ruby Heap contains allocated objects. There is a &#8220;Free List&#8221; array inside the heap.</p>

<p><img src="http://dpaluy.github.io/images/freelist_ruby_heap.png" alt="Ruby Heap - Free List" /></p>

<p>While new object allocated, the RVM looks for an empty place in &#8220;Free List&#8221; and allocates it for a newly creted one.
If the &#8220;Free List&#8221; is empty (all slots are allocated), RVM calls to Garbage Collector (GC).</p>

<p>The Garbage Collector finds non-reachable objects and remove them. If &#8220;Free List&#8221; is still empty, another Heap allocated.</p>

<p><strong>Conclusion</strong>: The more objects we have, the longer GC process. And it&#8217;s a cause for slow application.</p>

<h3>How should I debug my GC?</h3>

<p>I suggest to use <a href="https://github.com/nixme/pry-debugger">pry-debugger</a>.</p>

<p>There are several tools we can use while debugging:</p>

<ul>
<li><em>ObjectSpace class</em></li>
<li><em>Heap dump (via GC patch)</em></li>
</ul>


<p>But to get it all functionality you need to use patched version of Ruby.</p>

<p>To enable heap dump support, pass the –enable-gcdebug option to the rvm install command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 1.9.3 -C --enable-gcdebug -n gcdebug</span></code></pre></td></tr></table></div></figure>




<h4 id="object-space"><a href="http://ruby-doc.org/core-1.9.3/ObjectSpace.html" target="_blank">ObjectSpace class</a></h4>


<ul>
<li><em>ObjectSpace.count_objects</em> - returns a hash of counts objects of each type</li>
<li><a href="http://cirw.in/blog/find-references">Visualizing memory leaks in Ruby</a></li>
</ul>


<p>An example of method I used to get a better output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">get_object_stats</span>
</span><span class='line'>  <span class="n">return_value</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="no">ObjectSpace</span><span class="o">::</span><span class="n">each_object</span><span class="p">(</span><span class="no">Object</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">my_object</span><span class="o">|</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">return_value</span><span class="o">[</span><span class="n">my_object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">return_value</span><span class="o">[</span><span class="n">my_object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="o">][</span><span class="ss">:count</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">return_value</span><span class="o">[</span><span class="n">my_object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">return_value</span><span class="o">[</span><span class="n">my_object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span> <span class="o">=</span> <span class="n">my_object</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>      <span class="n">return_value</span><span class="o">[</span><span class="n">my_object</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">downcase</span><span class="o">][</span><span class="ss">:count</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">return_value</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="o">-</span><span class="n">v</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://blog.engineyard.com/2013/ruby-concurrency">Source</a></p>

<h4>Heap dump</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GC</span><span class="o">.</span><span class="n">enable_stats</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">GC</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="no">GC</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:enable_stats</span><span class="p">)</span>
</span><span class='line'><span class="no">GC</span><span class="o">.</span><span class="n">start</span> <span class="c1"># clean up heap</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="c1"># YOUR CODE GOES HERE</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="c1"># dump it, including class names of heap objects</span>
</span><span class='line'><span class="no">GC</span><span class="o">.</span><span class="n">dump_file_and_line_info</span><span class="p">(</span><span class="n">filename</span><span class="p">:</span> <span class="s2">&quot;heap.dump&quot;</span><span class="p">,</span> <span class="n">include_class_names</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">stat_string</span> <span class="o">=</span> <span class="s2">&quot;allocated: </span><span class="si">#{</span><span class="no">GC</span><span class="o">.</span><span class="n">allocated_size</span><span class="o">/</span><span class="mi">1024</span><span class="si">}</span><span class="s2">K total in </span><span class="si">#{</span><span class="no">GC</span><span class="o">.</span><span class="n">num_allocations</span><span class="si">}</span><span class="s2"> allocations, GC calls: </span><span class="si">#{</span><span class="no">GC</span><span class="o">.</span><span class="n">collections</span><span class="si">}</span><span class="s2">, GC time: </span><span class="si">#{</span><span class="no">GC</span><span class="o">.</span><span class="n">time</span> <span class="o">/</span> <span class="mi">1000</span><span class="si">}</span><span class="s2"> msec&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Other interesting solutions to check:</h3>

<ul>
<li><a href="https://github.com/tmm1/gdb.rb">gdb7 hooks for MRI</a></li>
<li><a href="http://patshaughnessy.net/2012/3/23/why-you-should-be-excited-about-garbage-collection-in-ruby-2-0">Why You Should Be Excited About Garbage Collection in Ruby 2.0</a></li>
<li><a href="https://github.com/tmm1/rbtrace">Trace for Ruby</a></li>
<li><a href="http://vimeo.com/12748731">GoRuCo 2010 - Aman Gupta - memprof: the ruby level memory profiler</a> - A little bit outdated but very interesting</li>
</ul>


<p><em>Note</em>: the <a href="https://github.com/ice799/memprof">memprof</a> works only with Ruby 1.8.x</p>

<p>My <a href="https://speakerdeck.com/dpaluy/debugging-and-profiling-rails-app">slides</a> at <a href="http://www.rubyunderground.co.il/">RubyUnderground</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Rails Application - Part 1]]></title>
    <link href="http://dpaluy.github.io/blog/2013/01/30/debugging-rails-application-part1/"/>
    <updated>2013-01-30T09:25:00+02:00</updated>
    <id>http://dpaluy.github.io/blog/2013/01/30/debugging-rails-application-part1</id>
    <content type="html"><![CDATA[<h2>How to debug Rails application?</h2>

<p>There are several gems to debug your Ruby code:</p>

<h3><strong><a href="https://github.com/cldwalker/debugger">debugger</a></strong> - A fork of ruby-debug that works on Ruby 1.9.3</h3>

<p><strong>Install</strong> (rvm):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install debugger -- --with-ruby-include=$rvm_path/src/ruby-1.9.3-p374/</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;debugger&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Usage</strong>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># Wherever you need a debugger, simply add:</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;debugger&#39;</span><span class="p">;</span> <span class="n">debugger</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong><a href="https://github.com/nixme/pry-debugger">pry-debugger</a></strong> - Using debugger within <a href="https://github.com/pry/pry">pry</a></h3>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;pry-debugger&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Configuration</strong> (Optional):</p>

<p>Add aliases:</p>

<figure class='code'><figcaption><span>$HOME/.pryrc </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;con&#39;</span><span class="p">,</span> <span class="s1">&#39;continue&#39;</span>
</span><span class='line'>  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="s1">&#39;step&#39;</span>
</span><span class='line'>  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;next&#39;</span>
</span><span class='line'>  <span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;fin&#39;</span><span class="p">,</span> <span class="s1">&#39;finish&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>NOTE: You won&#8217;t be able to use those words as params while debugging</em></strong></p>

<p><strong>Usage</strong>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># Wherever you need a debugger, simply add:</span>
</span><span class='line'>  <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example:</p>

<figure class='code'><figcaption><span>home_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">HomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>      <span class="c1"># Some code ...</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span><span class='line'>      <span class="c1"># Code to debug</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now start your rails server (<em>rails s</em>) and visit your controller url: <em>http://localhost:3000/home</em>. The pry debugger console will appear in your terminal.
You can use all <a href="https://github.com/pry/pry">pry</a> functionality inside your application in addition to predefined aliases(next, step, continue, etc.).</p>

<p><strong>Other useful commands:</strong></p>

<ul>
<li><strong>help</strong> - show a list of available commands</li>
<li><strong>exit</strong> - exit a context with a user provided value</li>
<li><strong>whereami</strong> - describe the current location (alternative: <strong>$</strong>)</li>
<li><strong>break</strong> - set a breakpoint</li>
<li><strong>wtf -v</strong> - see the entire backtrace</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve Rails Bootup Time]]></title>
    <link href="http://dpaluy.github.io/blog/2012/12/04/improve-rails-bootup-time/"/>
    <updated>2012-12-04T21:27:00+02:00</updated>
    <id>http://dpaluy.github.io/blog/2012/12/04/improve-rails-bootup-time</id>
    <content type="html"><![CDATA[<h3>Guide: How to improve your Rails Bootup Time</h3>

<h4>Benchmarks:</h4>

<p>I used <em>ruby-1.9.3-p327</em> with and without patch.</p>

<h5>The test is:</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo puts Time.now > test_script
</span><span class='line'>  time rails runner test_script</span></code></pre></td></tr></table></div></figure>


<h5>The results are:</h5>

<ul>
<li><strong>ruby-1.9.3-p327:</strong> rails runner test_script <em>16.01s</em> user <em>0.61s</em> system 99% cpu <strong>16.725 total</strong></li>
<li><strong>ruby-1.9.3-p327-fast_load:</strong> rails runner test_script  <em>6.11s</em> user <em>0.55s</em> system 98% cpu <strong>6.732 total</strong></li>
</ul>


<h4>How to apply:</h4>

<p>Download <a href="https://gist.github.com/4148257">fast_load.patch</a></p>

<p>Than, install the patch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 1.9.3 --patch fast_load.patch -n fast_load</span></code></pre></td></tr></table></div></figure>


<h3>Credentials</h3>

<p>Thanks to <a href="https://twitter.com/romanbsd">@romanbsd</a> for sending me this patch</p>

<h3>Faster Hacking!!!</h3>

<h2>Update</h2>

<p>I found the origin of this patch. It&#8217;s <a href="https://gist.github.com/4063779#file_require_perf.patch">here</a> and <a href="http://bugs.ruby-lang.org/issues/7158">here</a>
It&#8217;s a part of <a href="https://gist.github.com/4136519">falcon patch</a> but only for <em>fast require</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimize your RVM Ruby ]]></title>
    <link href="http://dpaluy.github.io/blog/2012/11/25/optimize-your-ruby/"/>
    <updated>2012-11-25T22:15:00+02:00</updated>
    <id>http://dpaluy.github.io/blog/2012/11/25/optimize-your-ruby</id>
    <content type="html"><![CDATA[<h3>TL;DR</h3>

<p>If you are using rvm with ruby-1.9.3 patch &lt; 327, reinstall it with cflags.patch.</p>

<h2>I would like to share my experience and summarize this issue.</h2>

<h4>There are several posts, regarding Ruby compiling optimization while using RVM, like:</h4>

<ul>
<li><a href="http://alisnic.net/blog/making-your-ruby-fly/">Making your ruby fly</a></li>
<li><a href="http://spin.atomicobject.com/2012/11/06/is-your-application-running-with-ruby-slow/">Is Your Application Running with Ruby – Slow?</a></li>
</ul>


<h3>First you should understand what are <a href="http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html">Optimization Options</a>.</h3>

<p><strong>O3</strong>
: turns on all optimizations specified by -O2 and also turns on the <em>-finline-functions, -funswitch-loops, -fpredictive-commoning, -fgcse-after-reload, -ftree-vectorize, -fvect-cost-model, -ftree-partial-pre and -fipa-cp-clone</em> options.</p>

<p>I followed the <a href="https://github.com/wayneeseguin/rvm/issues/1240">RVM issue</a> discussion at Github.
It suggested to apply <a href="https://raw.github.com/gist/3854178/fcd2f6d774cd35483f73d43c2ab9ee49405a287e/cflags.patch">CFLAG.patch</a> for all Ruby versions till <strong>ruby-1.9.3-p327</strong>.</p>

<p><em>NOTE</em>: <strong>1.9.3-p327</strong> does not require it, rvm uses a new feature with allowing multiple paths in <em>&#8211;with-opt-dir=</em> - so no <em>CFLAGS / LDFLAGS</em> are used.</p>

<p>How to apply:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm reinstall 1.9.3 --patch cflags.patch</span></code></pre></td></tr></table></div></figure>


<h3>Is it really improves ruby benchmark? Yes.</h3>

<p>See my results (<a href="https://gist.github.com/4147054">benchmark.rb</a>):</p>

<h4>ruby-1.9.3-p286 without patch</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./benchmark
</span><span class='line'>       user     system      total        real
</span><span class='line'>+=  46.020000   2.610000  48.630000 ( 48.827064)
</span><span class='line'>&lt;&lt;   0.220000   0.000000   0.220000 (  0.224581)</span></code></pre></td></tr></table></div></figure>


<h4>ruby-1.9.3-p286 with patch</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./benchmark
</span><span class='line'>       user     system      total        real
</span><span class='line'>+=  42.830000   2.480000  45.310000 ( 45.521011)
</span><span class='line'>&lt;&lt;   0.100000   0.000000   0.100000 (  0.099425)</span></code></pre></td></tr></table></div></figure>


<h3>Is it good for production?</h3>

<p>We use this patch in production with ruby-1.9.3-p286 for more than a month. Everything is stable, and we see significant improve in our application.</p>

<h3>Summary</h3>

<p>If you are using rvm with ruby-1.9.3 patch &lt; 327, reinstall it with cflags.patch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REST Debug Tips]]></title>
    <link href="http://dpaluy.github.io/blog/2012/03/04/rest-debug-tips/"/>
    <updated>2012-03-04T00:00:00+02:00</updated>
    <id>http://dpaluy.github.io/blog/2012/03/04/rest-debug-tips</id>
    <content type="html"><![CDATA[<p>If you need to debug Net protocol between your application and some other API,
you can output all request, this way:</p>

<pre><code>class Net::HTTP
  class &lt;&lt; self
    def new_with_debug(*args)
      new_without_debug(*args).tap { |http| http.set_debug_output(STDERR) }
    end
    alias_method_chain :new, :debug
  end
end
</code></pre>

<p>Another &#8220;Monkey patch&#8221; for RestClient so it will always provide authentication:</p>

<pre><code>require 'restclient'
module RestClient
  class Request
    def execute_with_auth(&amp;block)
      @user ||= 'someuser'
      @pass ||= 'password'
      execute_without_auth(&amp;block)
    end
    alias_method_chain :execute, :auth
  end
end
</code></pre>

<p>Thanks to <a href="https://github.com/romanbsd">@romanbsd</a> for providing those tips.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passwordless Login]]></title>
    <link href="http://dpaluy.github.io/blog/2012/03/01/passwordlesslogin/"/>
    <updated>2012-03-01T00:00:00+02:00</updated>
    <id>http://dpaluy.github.io/blog/2012/03/01/passwordlesslogin</id>
    <content type="html"><![CDATA[<p>I noticed that some developers didn&#8217;t know about <em>Passwordless Login</em></p>

<p>On your local computer, you must have an RSA public/private keys. Otherwise generate it:</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>One row solution is here:</p>

<pre><code>cat .ssh/id_rsa.pub | ssh user@example.com 'cat &gt;&gt; .ssh/authorized_keys'
</code></pre>

<p>Otherwise step-by-step explanation:</p>

<p>Copy your public key to your <em>example.com</em></p>

<pre><code>scp ~/.ssh/id_rsa.pub user@example.com:~/
</code></pre>

<p>SSH to your server</p>

<pre><code>ssh user@example.com
</code></pre>

<p>Now, append the public key to your authorized keys file and delete the file you uploaded:</p>

<pre><code>mkdir .ssh
cat id_rsa.pub &gt;&gt; .ssh/authorized_keys
rm id_rsa.pub
</code></pre>

<p>Make sure your permissions set properly:</p>

<pre><code>chmod go-w ~
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
</code></pre>
]]></content>
  </entry>
  
</feed>
