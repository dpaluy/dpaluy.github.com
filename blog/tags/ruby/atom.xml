<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ruby | Paluy on Miscellaneous]]></title>
  <link href="http://dpaluy.github.io/blog/tags/ruby/atom.xml" rel="self"/>
  <link href="http://dpaluy.github.io/"/>
  <updated>2013-09-11T23:21:53-04:00</updated>
  <id>http://dpaluy.github.io/</id>
  <author>
    <name><![CDATA[David Paluy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails code quality tools]]></title>
    <link href="http://dpaluy.github.io/blog/2013/09/09/rails-code-quality-tools/"/>
    <updated>2013-09-09T14:03:00-04:00</updated>
    <id>http://dpaluy.github.io/blog/2013/09/09/rails-code-quality-tools</id>
    <content type="html"><![CDATA[<p><em>The only valid measurement of code quality: WTFs/minute</em> <br /><a href="http://www.osnews.com/story/19266/WTFs_m" target="_blank">source</a></p>

<p>I would like to cover code quality tools I use while developing Rails applications.</p>

<p>Of course you should try <a href="https://codeclimate.com/" target="_blank">CodeClimate</a> service to monitor your project, but...</p>

<h2>Let`s overview some open source solutions:</h2>

<h3>1. <a href="https://github.com/railsbp/rails_best_practices">Rails Best Practises</a> - RBP</h3>

<p>It's a static code analysis tool that checks the quality of rails code. It can be <a href="https://github.com/railsbp/rails_best_practices#customize-configuration" target="_blank">customized</a> for your needs and even add your own <a href="https://github.com/railsbp/rails_best_practices/wiki/How-to-write-your-own-check-list" target="_blank">checklist</a></p>

<p>I prefer to add RBP analysis to CI tasks, as following:</p>

<p><code>
rails_best_practices -f html --template config/my_rails_best_practices.html.erb .
</code></p>

<p>while I use my custom RBP template report <code>config/my_rails_best_practices.html.erb</code>. The RBP report is a part of my CI artifacts.</p>

<p><strong>Alternative 1</strong>: <a href="https://github.com/roodi/roodi" target="_blank">ROODI</a> - Ruby Object Oriented Design Inferometer.
Usage: <code>roodi -config=config/roodi.yml "app/**/*.rb" "lib/**/*.rb" &gt; roodi_report.txt</code></p>

<p><strong>Alternative 2</strong>: <a href="https://github.com/bbatsov/rubocop" target="_blank">Rubocop</a></p>

<p><strong>Alternative 3</strong>: <a href="https://github.com/square/cane" target="_blank">Cane</a></p>

<p><strong>Alternative 4</strong>: <a href="http://rubydoc.info/github/YorickPeterse/ruby-lint/
" target="_blank">Ruby Lint</a></p>

<h3>2. Code Coverage - <a href="https://github.com/colszowka/simplecov" target="_blank">SimpleCov</a></h3>

<p>Add the following code to <code>spec_helper.rb</code></p>

<p>```ruby
require 'rubygems'</p>

<p>if ENV["COVERAGE"]
  require 'simplecov'
  SimpleCov.start 'rails'
end</p>

<h1>...</h1>

<p>```</p>

<p><strong>Note</strong>: Add <code>export COVERAGE=true</code> before you run your tests.</p>

<h3>3. <a href="https://github.com/bbatsov/ruby-style-guide" target="_blank">Ruby Style Guide</a>, <a href="https://github.com/bbatsov/rails-style-guide" target="_blank">Rails Style Guide</a> and <a href="https://github.com/airbnb/javascript" target="_blank">JavaScript Guide</a></h3>

<p>Your team should apply those guides or define your own. You should also check those <a href="https://github.com/styleguide/" target="_blank">Github guides</a>.</p>

<h3>4. Rails Security Scanner - <a href="http://brakemanscanner.org/" target="_blank">Brakeman</a></h3>

<h3>Note:</h3>

<p>Read this <a href="http://blog.codeclimate.com/blog/2013/08/07/deciphering-ruby-code-metrics/">blog post</a> by CodeClimate</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec - less known features]]></title>
    <link href="http://dpaluy.github.io/blog/2013/09/07/rspec-less-known-features/"/>
    <updated>2013-09-07T03:41:00-04:00</updated>
    <id>http://dpaluy.github.io/blog/2013/09/07/rspec-less-known-features</id>
    <content type="html"><![CDATA[<p>I would like to summarize some of less known RSpec feature I use during my development.</p>

<h3>Execute specific test from command line</h3>

<p>```ruby</p>

<h1>spec/controllers/user_controller_spec.rb</h1>

<p>require 'spec_helper'</p>

<p>describe UsersController do</p>

<p>  before (:each) do</p>

<pre><code>@user = FactoryGirl.create(:user)
sign_in @user
</code></pre>

<p>  end</p>

<p>  describe "GET 'show'" do</p>

<pre><code>it "should be successful" do
  get :show, id: @user.id
  response.should be_success
end

it "should find the right user" do
  get :show, id: @user.id
  assigns(:user).should == @user
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>

<p>Suppose you want to test only the test at line <em>#17</em>. You can append the line number to file pathrun:</p>

<p><code>
rspec spec/controllers/user_controller_spec.rb:17
</code></p>

<p>It will run only the test inside the scoped line. The same can be used with <em>describe</em>/<em>context</em>.</p>

<h3>Temporary pending test</h3>

<p>Suppose you need temporary disable a test at line <em>#8</em>. You can add <strong>x</strong> before <strong>it</strong> and the test is <strong>pending</strong> now.</p>

<p>```ruby
describe "GET 'show'" do</p>

<p>  it "should be successful" do</p>

<pre><code>get :show, id: @user.id
response.should be_success
</code></pre>

<p>  end</p>

<p>  # THIS TEST IS PENDING NOW
  xit "should find the right user" do</p>

<pre><code>get :show, id: @user.id
assigns(:user).should == @user
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>

<h3>Focus on specific test</h3>

<p>Add a tag to the selected test:</p>

<p>```ruby
describe "GET 'show'" do</p>

<p>  it "should be successful", focus: true do</p>

<pre><code>get :show, id: @user.id
response.should be_success
</code></pre>

<p>  end</p>

<p>  it "should find the right user" do</p>

<pre><code>get :show, id: @user.id
assigns(:user).should == @user
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>

<p>Then, run rspec as following: <code>rspec -t focus</code></p>

<h3>Rails.logger stub</h3>

<p>If you need to stub Rails logger, you should do the following:</p>

<p>```ruby</p>

<h1>Expecting to receive Rails.logger.debug some_message</h1>

<p>let(:logger_mock) { double("Rails.logger").as_null_object }
Rails.stub_chain(:logger, :debug).and_return(logger_mock)</p>

<h1>your test goes here</h1>

<h1>...</h1>

<p>#</p>

<h1>Don't forget to unstub the logger at the end of test!</h1>

<p>Rails.unstub(:logger)
```</p>

<p>More about <a href="https://www.relishapp.com/rspec/rspec-mocks/v/2-0/docs/stubs/stub-a-chain-of-methods">stub_chain</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caution - to_time in Rails]]></title>
    <link href="http://dpaluy.github.io/blog/2013/04/15/caution-to-time-in-rails/"/>
    <updated>2013-04-15T13:14:00-04:00</updated>
    <id>http://dpaluy.github.io/blog/2013/04/15/caution-to-time-in-rails</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>Attention on time zone while using <em>today.to_time</em> in your Rails application!</p>

<h2>Ruby <em>to_time</em> in your Rails application</h2>

<p>Suppose, you need to convert some date to datetime. You can use the Ruby <a href="http://api.rubyonrails.org/classes/Date.html#method-i-to_time" target="_blank">to_time</a> method:</p>

<p>```ruby
date = Date.new(2013, 04, 15)</p>

<p>date.to_time            # 2013-04-15 00:00:00 +0300
date.to_time(:local)    # 2013-04-15 00:00:00 +0300</p>

<h1>The Time Zone depends on your local machine</h1>

<p>date.to_time(:utc)      # 2013-04-15 00:00:00 +0000
```</p>

<p>If your server time zone is UTC, but Rails application has different time zone, for example:</p>

<p><code>ruby
config.time_zone = 'Central Time (US &amp; Canada)'
</code></p>

<p>converting from date to time will ignore Rails settings!</p>

<p>It happens, when you need to output your date in epoch format (for example: in json).</p>

<p>I suggest to convert your date to utc and than to epoch.</p>

<p><code>ruby
epoch = date.to_time(:utc).to_i
</code></p>

<p>Then, apply local time zone using JavaScript::</p>

<p><code>
var date = new Date(epoch);
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Profiling Rails Applications]]></title>
    <link href="http://dpaluy.github.io/blog/2013/04/09/profiling-rails-applications/"/>
    <updated>2013-04-09T01:49:00-04:00</updated>
    <id>http://dpaluy.github.io/blog/2013/04/09/profiling-rails-applications</id>
    <content type="html"><![CDATA[<p>Your finaly got clients and everything works fine.</p>

<p><img src="/images/mass_attack.gif" title="Users Attack" ></p>

<p>But users expect several performance issues.</p>

<h2>How can I profile my Ruby on Rails application?</h2>

<h3>Available Tools</h3>

<ul>
<li><a href="#gc-profiler">GC::Profiler</a></li>
<li><a href="#ruby-benchmark">Ruby Benchmark</a></li>
<li><a href="#object-space">ObjectSpace</a></li>
<li><a href="#ruby-prof">gem ruby-prof</a></li>
<li><a href="#perftools">gem perftools.rb</a></li>
</ul>


<h4 id='gc-profiler'><a href="http://ruby-doc.org/core-1.9.3/GC/Profiler.html" target="_blank">GC::Profiler</a></h4>


<p>The GC profiler provides access to information on GC runs including time, length and object space size.</p>

<p>```ruby
GC.start # clear GC before profiling
GC::Profiler.enable</p>

<h1>your code</h1>

<p>GC.start
puts GC::Profiler.report
GC::Profiler.disable
```</p>

<h4 id='ruby-benchmark'><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html" target="_blank">Ruby Benchmark</a></h4>


<p>Ruby has core module to Benchmark your code. It helps you to mesure running time of your code.</p>

<p>```ruby
require 'benchmark'</p>

<p>Benchmark.bm do|b|
  b.report("+= ") do</p>

<pre><code>a = ""
500_000.times { a += "." }
</code></pre>

<p>  end</p>

<p>  b.report("&lt;&lt; ") do</p>

<pre><code>a = ""
500_000.times { a &lt;&lt; "." }
</code></pre>

<p>  end
end
```</p>

<p>I suggest you to add <a href="https://github.com/evanphx/benchmark_suite" target="_blank">benchmark_suite gem</a>. There is a set of enhancements to the standard library benchmark.rb</p>

<h4 id='object-space'>ObjectSpace</h4>


<p>ObjectSpace class already described in previous <a href="/blog/2013/02/06/debugging-rails-application-part-2/#object-space">post</a>.
You should also check <a href="http://cirw.in/blog/find-references" target="_blank">Visualizing memory leaks in Ruby</a> using ObjectSpace methods.</p>

<h4 id='ruby-prof'><a href="https://github.com/ruby-prof/ruby-prof" target="_blank">RUBY-PROF</a></h4>


<p><strong>How to use in Rails:</strong></p>

<ul>
<li>Add the ruby-prof to your gemfile</li>
</ul>


<p><code>ruby
group :profile do
  gem 'ruby-prof'
end
</code></p>

<p><strong>Note:</strong> verify your <em>/config/environments/profile.rb</em> has the following settings:</p>

<p><code>ruby
config.cache_classes = true
config.cache_template_loading = true
</code></p>

<ul>
<li>Add rack adapter to <strong>config.ru</strong>:</li>
</ul>


<p><code>ruby
if Rails.env.profile?
  use Rack::RubyProf, :path =&gt; '/temp/profile'
end
</code></p>

<p><strong>Note:</strong> By default the rack adapter will generate a html call graph report and flat text report. You can add printer option as following:</p>

<p><code>ruby
use Rack::RubyProf, :path =&gt; '/temp/profile', :printers =&gt; {RubyProf::GraphHtmlPrinter =&gt; 'graph.html'} # or any other printer as described
</code></p>

<p>More printers options can be found <a href="https://github.com/ruby-prof/ruby-prof#printers" target="_blank">here</a></p>

<ul>
<li>Add Profile to your code:</li>
</ul>


<p>```ruby</p>

<h1>define mesurment type</h1>

<h1>as described: https://github.com/ruby-prof/ruby-prof#measurements</h1>

<p>RubyProf.measure_mode = RubyProf::PROCESS_TIME</p>

<p>RubyProf.start</p>

<h1>code to profile</h1>

<p>result = RubyProf.stop
```</p>

<h4 id='perftools'><a href="https://github.com/tmm1/perftools.rb" target="_blank">Perftools.rb</a></h4>


<p>While ruby-prof is a good tool, I, personally, prefere to use <strong>perftools.rb</strong>.
It also has a <a href="https://github.com/bhb/rack-perftools_profiler" target="_blank">rack gem</a>.</p>

<p>The <strong>main advantage</strong> of perftools: it samples your process using setitimer() so it can be used in production with minimal overhead.</p>

<p><strong>How to use in Rails:</strong></p>

<ul>
<li>Add the rack-perftools_profiler to your gemfile</li>
</ul>


<p><code>ruby
gem 'rack-perftools_profiler', :require =&gt; 'rack/perftools_profiler'
</code></p>

<ul>
<li>Add middleware to <strong>config/environment.rb</strong>:</li>
</ul>


<p><code>ruby
config.middleware.use ::Rack::PerftoolsProfiler, :default_printer =&gt; 'pdf', :bundler =&gt; true
</code></p>

<p>See more options <a href="https://github.com/bhb/rack-perftools_profiler#options" target="_blank">here</a>.</p>

<ul>
<li>Profile your application</li>
</ul>


<p><code>
curl http://localhost:3000/__start__
curl http://localhost:3000/__stop__
curl http://localhost:3000/__data__
</code></p>

<h3>Visualization of your report</h3>

<ul>
<li>ruby-prof and perftools.rb has support for different output formats. One of them is <a href="http://kcachegrind.sourceforge.net/html/Home.html" target="_blank">KCacheGrind</a></li>
<li>In Ruby 2 you can gather your stack traces. Read more <a href="Flame graphs in Ruby MiniProfiler" target="_blank">here</a></li>
</ul>


<h2>Summary</h2>

<ul>
<li>Remember: More Objects => Longer GC => Slow application</li>
<li>Always examine your HEAP</li>
<li>Use Tools!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Rails Application - Part 2]]></title>
    <link href="http://dpaluy.github.io/blog/2013/02/06/debugging-rails-application-part-2/"/>
    <updated>2013-02-06T11:32:00-05:00</updated>
    <id>http://dpaluy.github.io/blog/2013/02/06/debugging-rails-application-part-2</id>
    <content type="html"><![CDATA[<p>In previous <a href="/blog/2013/01/30/debugging-rails-application-part1/">post</a>, I described which tools I use for debugging Rails (Ruby) applications.</p>

<p>In this post I will show you how to debug your Garbage Collector.</p>

<h3>Why should I debug my GC?</h3>

<p>First, you should understand how ruby allocates memory for new objects.
What happened inside your OS, each time you write <code>book = Book.new</code>?</p>

<p><img src="/images/how_ruby_works.png" alt="How Ruby Memory Works" /></p>

<p>RVM defines Process Heap for each Ruby process. Than, it creates first Ruby Heap.
Each Ruby Heap contains allocated objects. There is a "Free List" array inside the heap.</p>

<p><img src="/images/freelist_ruby_heap.png" alt="Ruby Heap - Free List" /></p>

<p>While new object allocated, the RVM looks for an empty place in "Free List" and allocates it for a newly creted one.
If the "Free List" is empty (all slots are allocated), RVM calls to Garbage Collector (GC).</p>

<p>The Garbage Collector finds non-reachable objects and remove them. If "Free List" is still empty, another Heap allocated.</p>

<p><strong>Conclusion</strong>: The more objects we have, the longer GC process. And it's a cause for slow application.</p>

<h3>How should I debug my GC?</h3>

<p>I suggest to use <a href="https://github.com/nixme/pry-debugger">pry-debugger</a>.</p>

<p>There are several tools we can use while debugging:</p>

<ul>
<li><em>ObjectSpace class</em></li>
<li><em>Heap dump (via GC patch)</em></li>
</ul>


<p>But to get it all functionality you need to use patched version of Ruby.</p>

<p>To enable heap dump support, pass the <em>-enable-gcdebug</em> option to the rvm install command:</p>

<p><code>
rvm install 1.9.3 -C --enable-gcdebug -n gcdebug
</code></p>

<h4 id="object-space"><a href="http://ruby-doc.org/core-1.9.3/ObjectSpace.html" target="_blank">ObjectSpace class</a></h4>


<ul>
<li><em>ObjectSpace.count_objects</em> - returns a hash of counts objects of each type</li>
<li><a href="http://cirw.in/blog/find-references">Visualizing memory leaks in Ruby</a></li>
</ul>


<p>An example of method I used to get a better output:</p>

<p>```ruby
def get_object_stats
  return_value = Hash.new
  ObjectSpace::each_object(Object) {|my_object|</p>

<pre><code>unless return_value[my_object.class.to_s.downcase].nil?
  return_value[my_object.class.to_s.downcase][:count] += 1
else
  return_value[my_object.class.to_s.downcase] = Hash.new
  return_value[my_object.class.to_s.downcase][:name] = my_object.class
  return_value[my_object.class.to_s.downcase][:count] = 1
end
</code></pre>

<p>  }
  return_value.sort_by {|k,v| -v[:count]}
end
```</p>

<p><a href="https://blog.engineyard.com/2013/ruby-concurrency">Source</a></p>

<h4>Heap dump</h4>

<p>```ruby
GC.enable_stats if defined?(GC) &amp;&amp; GC.respond_to?(:enable_stats)
GC.start # clean up heap</p>

<h1>...</h1>

<h1>YOUR CODE GOES HERE</h1>

<h1>...</h1>

<h1>dump it, including class names of heap objects</h1>

<p>GC.dump_file_and_line_info(filename: "heap.dump", include_class_names: true)
stat_string = "allocated: #{GC.allocated_size/1024}K total in #{GC.num_allocations} allocations, GC calls: #{GC.collections}, GC time: #{GC.time / 1000} msec"
```</p>

<h3>Other interesting solutions to check:</h3>

<ul>
<li><a href="https://github.com/tmm1/gdb.rb">gdb7 hooks for MRI</a></li>
<li><a href="http://patshaughnessy.net/2012/3/23/why-you-should-be-excited-about-garbage-collection-in-ruby-2-0">Why You Should Be Excited About Garbage Collection in Ruby 2.0</a></li>
<li><a href="https://github.com/tmm1/rbtrace">Trace for Ruby</a></li>
<li><a href="http://vimeo.com/12748731">GoRuCo 2010 - Aman Gupta - memprof: the ruby level memory profiler</a> - A little bit outdated but very interesting</li>
</ul>


<p><em>Note</em>: the <a href="https://github.com/ice799/memprof">memprof</a> works only with Ruby 1.8.x</p>

<p>My <a href="https://speakerdeck.com/dpaluy/debugging-and-profiling-rails-app">slides</a> at <a href="http://www.rubyunderground.co.il/">RubyUnderground</a></p>
]]></content>
  </entry>
  
</feed>
